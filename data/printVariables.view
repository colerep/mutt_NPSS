CaseColumnViewer printStep {

    void appendEntries() {
        int i, j;
        string n;
        for (i=0; i<oList.entries(); i++) {
            for (j=0; j<sList.entries(); j++) {
              n = oList[i] + "." + sList[j];
              if (exists(n)) {
                dynList.append(n);
              }
            }
        }
    }

    void appendVariable(string n) {
        if (exists(n)) {
            dynList.append(n);
        }
    }

    outStreamHandle = "cout";
    variableList = {};

    string dynList[] = {"CASE", "time"};

    string oList[];
    string sList[];

    // FluidLinks
    oList = .list("Link",1,"exists(\"Tt\")==1");
    sList = {"Tt","Pt","ht","s","W","Cpt","gamt","rhot"};
    // if ( THERMPACKAGE == "REFPROP" ) { sList.append("xt"); }
    appendEntries();

    oList = .list("Port",1,"exists(\"Tt\")==1");
    sList = {"Tt","Pt","ht","s","W","Cpt","gamt","rhot"};
    // if ( THERMPACKAGE == "REFPROP" ) { sList.append("xt"); }
    appendEntries();

    // Load Element
    oList = .list("BleedOutPort",1,"exists(\"fracW\")==1");
    sList = { "fracW" }
    appendEntries();

    // Compressors and Turbines
    oList = .list("Compressor",1,"exists(\"PRdes\")==1");
    sList = { "pwr", "trq", "PR", "PRdes", "Wc", "Nc", "eff", "effDes", "effPoly", "S_map.WcMap", "S_map.NcMap", "S_map.effMap", "S_map.PRmap", "S_map.WcMapDes", "S_map.NcMapDes", "S_map.effMapDes", "S_map.PRmapDes"};
    appendEntries();

    oList = .list("Turbine",1,"exists(\"PRdes\")==1");
    sList = { "pwr", "trq", "PR", "PRdes", "PRbase", "eff", "effDes", "Np", "Wp", "WpCalc", "S_map.effMap", "S_map.effMapDes", "S_map.NpMap", "S_map.NpMapDes", "S_map.PRmap", "S_map.PRmapDes", "S_map.WpMap", "S_map.WpMapDes", "S_map.s_effDes", "S_map.s_effRe", "S_map.s_NpDes", "S_map.s_PRdes", "S_map.s_WpDes", "S_map.s_WpRe" }
    appendEntries();

    oList = .list("TurbineSwRI2",1,"exists(\"PRdes\")==1");
    sList = { "pwr", "trq", "PR", "PRdes", "PRbase", "eff", "effDes", "Np", "Wp", "WpCalc", "S_map.effMap", "S_map.effMapDes", "S_map.NpMap", "S_map.NpMapDes", "S_map.PRmap", "S_map.PRmapDes", "S_map.WpMap", "S_map.WpMapDes", "S_map.s_effDes", "S_map.s_effRe", "S_map.s_NpDes", "S_map.s_PRdes", "S_map.s_WpDes", "S_map.s_WpRe" }
    appendEntries();


    oList = .list("SwRICompressor",1);
    sList = { "pwr", "trq", "PR", "PRdes", "alpha", "Qdotin", "Qdotin_map", "DP", "DPdes", "eff", "effDes", "isenEff", "isenEffDes", "polyEff", "polyEffDes", "polyEff_map", "polyHead", "polyHeadDes", "polyHead_map" };
    appendEntries();

    // Load Element
    oList = .list("Element",1,"exists(\"trqLoad\")==1");
    sList = { "pwr", "pwrLoad", "trq", "trqLoad", "Nload", "NR", "dTqT", "pwrDC" }
    appendEntries();

    // Shafts
    oList = .list("Shaft",1,"exists(\"pwrNet\")==1");
    sList = { "pwrIn", "pwrOut", "pwrNet", "trqIn", "trqOut", "trqNet", "Nmech" };
    appendEntries();

    // Heaters
    oList = .list("HeaterSwRI",1);
    sList = { "switchHeat", "coolerMode", "dT", "dTsat", "Q", "hout", "Tout", "x", "pwr" };
    appendEntries();

    // Duct
    oList = .list("Duct",1);
    sList = { "dP", "dPqP", "dPqP_in", "dPqP_dmd", "Q", "Q_in", "Q_dmd" };
    appendEntries();

    // // HeatExchangers
    // oList = .list("HeatExchanger",1);
    // sList = { "switchQcalc", "switchQ", "Q", "effect", "cap1", "cap2" };
    // appendEntries();

    // Wall{1,2,SwRI}
    oList = .list("Element",1,"exists(\"Ahx1\")==1");
    sList = { "Ahx1", "Ahx2", "Chx1", "Chx2", "ChxDes1", "ChxDes2", "CpMat", "Qhx1", "Qhx2", "approach_hot", "approach_cold", "LMDT", "TgasPath", "Tmat", "Wdes1", "Wdes2", "dTmatqdt", "effect", "expChx1", "expChx2", "kcDes1", "kcDes2", "massMat", "muDes1", "muDes2" };
    appendEntries();

    oList = .list("CounterHxSwRI",1);
    // sList = { "switchQcalc", "switchQ", "Q", "effect_Cp", "effect_h", "cap1", "cap2" };
    sList = { "switchQ", "switchApproachCalc",
              "effect_Cp", "effect_des", "effect_h",
              "cap1", "cap2", "capMin",
              "approach_des", "approach_hotOut", "approach_hotIn", "approach_min", "minDt",
              "Q_des", "Q", "Qmax1", "Qmax2", "Qmin_h" };
    appendEntries();

    oList = .list("CounterHxSwRI_OD",1);
    // sList = { "switchQcalc", "switchQ", "Q", "effect_Cp", "effect_h", "cap1", "cap2" };
    sList = { "switchQ", "switchApproachCalc",
              "effect_Cp", "effect_des", "effect_h",
              "cap1", "cap2", "capMin",
              "approach_des", "approach_hotOut", "approach_hotIn", "approach_min", "minDt",
              "Q_des", "Q", "Qmax1", "Qmax2", "Qmin_h",
			  "nNodes", "hAratio",
			  "LMTD","UA","NTU"};
    appendEntries();


    oList = .list("Element",1,"exists(\"effect\")==1");
    sList = { "effect" };
    appendEntries();

    oList = .list("Element",1,"exists(\"effect_Cp\")==1");
    sList = { "effect_Cp" };
    appendEntries();

    oList = .list("Element",1,"exists(\"effect_h\")==1");
    sList = { "effect_h" };
    appendEntries();


    // Postprocessing
    oList = { "Perf" };
    sList = { "pwrNet", "Qin", "Xt", "eff", "effC", "pctC", "eff2"};
    appendEntries();

    // Postprocessing
    oList = { "PerfCycle", "PerfBlock", "PerfPlant" };
    sList = { "pwrNet", "pwrLoad", "Qin", "eff", "effLoad", "effC", "pctC", "converged" };
    appendEntries();

    // Postprocessing
    oList = { "Post" };
    sList = { "systemFluidMass", "systemFluidVol" };
    appendEntries();

    // solver
    // oList = { "solver" };
    oList = .list("Solver",1);
    sList = { "converged", "iterationCounter", "passCounter", "numJacobians", "numBroydens" };
    appendEntries();

    // Error Handler
    oList = { "errHandler" };
    sList = { "numErrors", "numWarnings", "numMessages" };
    appendEntries();

// Error Handler
    oList = { "errHandler" };
    sList = { "numErrors", "numWarnings", "numMessages" };
    appendEntries();


    oList = .list("Element",1,"exists(\"s_Wp\")==1");
    sList = { "s_Wp" };
    appendEntries();    

    oList = .list("SubElement",1,"exists(\"s_Wp\")==1");
    sList = { "s_Wp" };
    appendEntries();    

    oList = .list("Element",1,"exists(\"s_Qdotin\")==1");
    sList = { "s_Qdotin" };
    appendEntries();

    oList = .list("Element",1,"exists(\"systemFluidVol\")==1");
    sList = { "systemFluidVol", "systemFluidMass" };
    appendEntries();


    appendVariable("switchDes");
    // appendVariable("NetPower");

    // scalars
    //dynList.append( "pctAcetone_in");

    variableList = dynList;

    // cout << "dynList " << dynList << endl;
    // cout << "variableList " << variableList << endl;
}

CaseColumnViewer printColumn {
    outStreamHandle = "os_printColumn";
    variableList = printStep.variableList;
    // Formatting
    defRealFormat = "?????.?????";
    defSNFormat   = "??.?????E????";
    caseHeaderBody = "";
    caseHeaderVars = {};
    // Include solutions with errors
    showErrors = 1;
    // Mark solutions with errors w/ + or *
    showMarks = 0;
    titleBody = "# " + titleBody;
}

if (exists("os_printColumnSI")) {
    copy("printColumn","printColumnSI");
    printColumnSI { 
        outStreamHandle = "os_printColumnSI";
        unitSystem = "SI";   
    }    
}

// CaseRowViewer printRowSI {
//     outStreamHandle = "os_printRowSI";
//     // Re-use the variable list
//     variableList = printStep.variableList;
//     // Formatting
//     defRealFormat = "?????.?????";
//     defSNFormat   = "??.?????E????";
//     caseHeaderBody = "";
//     caseHeaderVars = {};
//     showErrors = 0;
//     showMarks = 0;
//     titleBody = "# " + titleBody;
//     unitSystem = "SI";
// }

CaseRowViewer printRow {
    outStreamHandle = "os_printRow";
    // Re-use the variable list
    variableList = printStep.variableList;
    // Formatting
    defRealFormat = "?????.?????";
    defSNFormat   = "??.?????E????";
    caseHeaderBody = "";
    caseHeaderVars = {};
    // Include solutions with errors
    showErrors = 1;
    // Mark solutions with errors w/ + or *
    showMarks = 0;
    titleBody = "# " + titleBody;
    showHeaders = -1;
}

if (exists("os_printRowSI")) {
    copy("printRow","printRowSI");
    printRowSI { 
        outStreamHandle = "os_printRowSI";
        unitSystem = "SI";   
    }
}
